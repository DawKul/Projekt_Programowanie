#include <iostream>

using namespace std;

// Definicja pojedynczego węzła listy
struct Node {
    int data;       // wartość przechowywana w węźle
    Node* next;     // wskaźnik na następny węzeł
    Node* prev;     // wskaźnik na poprzedni węzeł
};

// Klasa implementująca listę dwukierunkową
class DoublyLinkedList {
private:
    Node* head;     // wskaźnik na pierwszy element (głowę)
    Node* tail;     // wskaźnik na ostatni element (ogon)

public:
    // Konstruktor - tworzy pustą listę
    DoublyLinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    // Dodanie elementu na początek listy
    void addFront(int value) {
        Node* newNode = new Node();   // Tworzymy nowy węzeł
        newNode->data = value;        // Ustawiamy jego wartość
        newNode->next = head;         // Nowy węzeł wskazuje na dotychczasowy początek
        newNode->prev = nullptr;      // Nowy węzeł nie ma poprzednika

        if (head != nullptr) {
            head->prev = newNode;     // Jeśli lista nie jest pusta, stary początek wskazuje na nowy węzeł
        }
        else {
            tail = newNode;           // Jeśli lista była pusta, nowy węzeł staje się także końcem
        }

        head = newNode;               // Nowy węzeł staje się początkiem
    }

    // Dodanie elementu na koniec listy
    void addBack(int value) {
        Node* newNode = new Node();   // Tworzymy nowy węzeł
        newNode->data = value;        // Ustawiamy jego wartość
        newNode->next = nullptr;      // Nowy węzeł nie ma następcy
        newNode->prev = tail;         // Nowy węzeł wskazuje na dotychczasowy koniec

        if (tail != nullptr) {
            tail->next = newNode;     // Jeśli lista nie jest pusta, stary koniec wskazuje na nowy węzeł
        }
        else {
            head = newNode;           // Jeśli lista była pusta, nowy węzeł staje się także początkiem
        }

        tail = newNode;               // Nowy węzeł staje się końcem
    }

    // Usunięcie elementu z początku listy
    void removeFront() {
        if (head == nullptr) return;  // Sprawdzamy, czy lista nie jest pusta

        Node* temp = head;            // Tymczasowo przechowujemy obecny początek

        if (head->next != nullptr) {
            head = head->next;        // Ustawiamy nowy początek
            head->prev = nullptr;     // Usuwamy wskaźnik na poprzedni element
        }
        else {
            head = nullptr;           // Jeśli był to jedyny element, lista staje się pusta
            tail = nullptr;
        }

        delete temp;                  // Usuwamy stary początek
    }

    // Usunięcie elementu z końca listy
    void removeBack() {
        if (tail == nullptr) return;  // Sprawdzamy, czy lista nie jest pusta

        Node* temp = tail;            // Tymczasowo przechowujemy obecny koniec

        if (tail->prev != nullptr) {
            tail = tail->prev;        // Ustawiamy nowy koniec
            tail->next = nullptr;     // Usuwamy wskaźnik na następny element
        }
        else {
            head = nullptr;           // Jeśli był to jedyny element, lista staje się pusta
            tail = nullptr;
        }

        delete temp;                  // Usuwamy stary koniec
    }

    // Wyświetlenie wszystkich elementów listy
    void display() {
        Node* current = head;         // Zaczynamy od początku
        while (current != nullptr) {
            cout << current->data << " ";  // Wyświetlamy wartość węzła
            current = current->next;       // Przechodzimy do następnego węzła
        }
        cout << endl;
    }


};

// Program główny, testowanie listy dwukierunkowej
int main() {
    DoublyLinkedList list;

    list.addFront(10);
    list.addBack(20);
    list.addFront(5);
    list.addBack(30);

    cout << "Lista: ";
    list.display();                   // Wyświetlamy listę

    list.removeFront();               // Usuwamy element z początku
    cout << "Po usunieciu z poczatku: ";
    list.display();                   // Wyświetlamy listę

    list.removeBack();                // Usuwamy element z końca
    cout << "Po usunieciu z koca: ";
    list.display();                   // Wyświetlamy listę

  

    return 0;
}
